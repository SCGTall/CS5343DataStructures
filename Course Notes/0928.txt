heap: tree that satisfies the heap property (priority queue)
node.val <= children.val (minimun heap)
node.val >= children.val (maximun heap)
do not have to be a binary tree

binary heap
[5(count), 5, 7, 20, 10, 13]
		5
	7		20
 10	  13

insert:
add in the end
while (parent.val > node.val) swap(parent.val, node.val)

				5
		7				20
	10		13		21		30
  15  11  (1)
  
				1
		5				20
	10		7		21		30
 15  11  13

void insert(int[] a, int val){
	a[a[0] + 1] = val;
	a[0]++;
	int i = a[o];
	boolean flag = true;
	while ((i > 0) && flag)
	{
		int parent = i / 2;
		if (a[i] < a[parent])
		{
			swap(a[i], a[parent]);
			i = parent;
		}
		else
		{
			flag = false;
		}
	}
}
O(logn)

delete
always delete root for it is a queue
move the tail to the root and update

				(5)
		7				20
	10		13		21		30
  15  11
  
				11
		7				20
	10		13		21		30
  15

				7
		10				20
	11		13		21		30
  15

int delete(int[] a)// a[ > a[0]] invalid but still have number
{
	int output = a[1];
	a[1] = a[a[0]];
	a[0]--;
	int i = a[1];
	boolean flag = true;
	while ((i > a[0]) && flag)
	{
		int left = i * 2;
		int right = i * 2 + 1;
		boolean leftLess = a[i * 2] < a[i * 2 + 1];
		int child = leftLess ? i * 2, i * i + 1;
		if (a[i] > a[child])
		{
			swap(a[i], a[child]);
			i = child;
		}
		else
		{
			flag = false;
		}
	}
}

complete
from a[0] / 2 update to a[1], every update should do till cannot do
				5
		7				11
					20		3
				  32	  9	  12
				   6	    1
				   		   29
array: [11, 5, 7, 11, , , 20, 3, 32, , 9, 12, , , , , , 6, , , , 1, ..., 29]
[11, 5, 7, 11, 20, 3, 32, 9, 12, 6, 1, 29]
[11, 1, 3, 9, 6, 5, 32, 11, 12, 20, 7, 29]
∑∞ j=0(j * x^j) = x / (1 - x)^2
O(n)

add elements arbitrarily to form a complete a binary heap
[12, 5, 11, 3, 10, 6, 9, 4, 8, 1, 7, 2](not a array)
				12
		5				11
	3		10		6		9
  4	  8	  1	  7	  2

				12
		5				11
	3		10		(6)		9
  4	  8	  1	  7	  2

				12
		5				11
	3		(10)	2		9
  4	  8	  1	  7	  6

				12
		5				11
	(3)		1		2		9
  4	  8	  10  7	  6

				12
		5				(11)
	3		1		2		9
  4	  8	  10  7	  6

				12
		(5)				2
	3		1		6		9
  4	  8	  10  7	  11

				(12)
		1				2
	3		5		6		9
  4	  8	  10  7	  11

				1
		3				2
	4		5		6		9
  12  8	  10  7	  11
[1, 3, 2, 4, 5, 6, 9, 12, 8, 10, 7, 11]

array: [11, 21, 15, 25, 3, 5, 12, 7, 19, 45, 2, 9]
				21
		15				25
	3		5		12		7
  19  45   2  9

				21
		15				25
	3		9		12		7
  19  45   2  5

				21
		15				25
	45		9		12		7
  19  3   2  5

				21
		15				25
	45		9		12		7
  19  3   2  5

				21
		45				25
	19		9		12		7
  15  3   2  5

				45
		21				25
	19		9		12		7
  15  3   2  5
O(n)

every delete return a root, collection of all returns make a sort
array: [11, 45, 21, 25, 19, 9, 12, 7, 15, 3, 2, 5]
				25
		21				12
	19		9		5		7
  15  3   2  45
[10, 25, 21, 12, 19, 9, 5, 7, 15, 3, 2, 45]
				21
		19				12
	15		9		5		7
  2  3   25  45
[10, 21, 19, 12, 15, 9, 5, 7, 2, 3, 25, 45]
[9, 3, 19, 12, 15, 9, 5, 7, 2, 21, 25, 45]
[9, 19, 15, 12, 3, 9, 5, 7, 2, 21, 25, 45]
...
[1, 2, 3, 5, 7, 9, 12, 15, 19, 21, 25, 45]sort!

heap sort:
heapify(a)
while (a[0] > 1)
{
	swap[a[a[0]], a[i]];
	a[0]--;
	percolateND(a);
}
[11, 1,  3, 9,  6, 5, 32, 11,  12, 20, 7, 29]
[10, 3,  5, 9,  6, 7, 32, 11,  12, 20, 29, 1]
[9, 5,  6, 9,  20, 7, 32, 11,  12, 29, 3, 1]
[8, 6,  7, 9,  20, 29, 32, 11,  12, 5, 3, 1]
[7, 7,  12, 9,  20, 29, 32, 11,  6, 5, 3, 1]
[6, 9,  12, 11,  20, 29, 32, 7,  6, 5, 3, 1]
[5, 11,  12, 20,  32, 29, 9, 7,  6, 5, 3, 1]
[4, 12,  29, 20,  32, 11, 9, 7,  6, 5, 3, 1]
[3, 20,  29, 32,  12, 11, 9, 7,  6, 5, 3, 1]
[2, 29,  32, 20,  12, 11, 9, 7,  6, 5, 3, 1]
[1, 32,  29, 20,  12, 11, 9, 7,  6, 5, 3, 1]
O(nlogn)

merge sort
[85, 24, 63, 45, 17, 31, 96, 50]
divide by half until each node has at most one element
orderly compare each node and merge:
node1(a1, a2, a3, ...) node2(b1, b2, b3, ...)
nodePar(merge(a1, b1), merge(a2, b3), merge(a3, b3), ...);
merge: merge two children in order
[24, 85], [45, 63], [17, 31], [50, 96]
[24, 45, 63, 85], [17, 31, 50, 96]
[17, 24, 31, 45, 50, 63, 85, 96]
